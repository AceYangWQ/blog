#!/usr/bin/env node

'use strict';

// 控制台输出colors包
var colors     = require('colors/safe'),
    // node 系统模块
    os         = require('os'),
    // http-server文件
    httpServer = require('../lib/http-server'),
    // 端口查找依赖包
    portfinder = require('portfinder'),
    // 打开浏览器
    opener     = require('opener'),
    argv       = require('optimist')
      .boolean('cors')
      .argv;

// os.networkInterfaces()方法返回一个对象，包含只有被赋予网络地址的网络接口。
// 链接地址查看：http://nodejs.cn/api/os/os_networkinterfaces.html
var ifaces = os.networkInterfaces();

// 输出 -h 或者 --help时显示如下帮助信息
if (argv.h || argv.help) {
  console.log([
    'usage: http-server [path] [options]',
    '',
    'options:',
    '  -p --port    Port to use [8080]',
    '  -a           Address to use [0.0.0.0]',
    '  -d           Show directory listings [true]',
    '  -i           Display autoIndex [true]',
    '  -g --gzip    Serve gzip files when possible [false]',
    '  -e --ext     Default file extension if none supplied [none]',
    '  -s --silent  Suppress log messages from output',
    '  --cors[=headers]   Enable CORS via the "Access-Control-Allow-Origin" header',
    '                     Optionally provide CORS headers list separated by commas',
    '  -o [path]    Open browser window after starting the server',
    '  -c           Cache time (max-age) in seconds [3600], e.g. -c10 for 10 seconds.',
    '               To disable caching, use -c-1.',
    '  -U --utc     Use UTC time format in log messages.',
    '',
    '  -P --proxy   Fallback proxy if the request cannot be resolved. e.g.: http://someurl.com',
    '',
    '  -S --ssl     Enable https.',
    '  -C --cert    Path to ssl cert file (default: cert.pem).',
    '  -K --key     Path to ssl key file (default: key.pem).',
    '',
    '  -r --robots  Respond to /robots.txt [User-agent: *\\nDisallow: /]',
    '  --no-dotfiles  Do not show dotfiles',
    '  -h --help    Print this list and exit.'
  ].join('\n'));
  process.exit();
}

// 声明端口port、host和ssl等变量
var port = argv.p || argv.port || parseInt(process.env.PORT, 10),
    host = argv.a || '0.0.0.0',
    ssl = !!argv.S || !!argv.ssl,
    proxy = argv.P || argv.proxy,
    utc = argv.U || argv.utc,
    logger;

// 如果是客户端，logger 赋值给一个对象，包含info和request两个值
if (!argv.s && !argv.silent) {
  logger = {
    info: console.log,
    request: function (req, res, error) {
      var date = utc ? new Date().toUTCString() : new Date();
      if (error) {
        logger.info(
          '[%s] "%s %s" Error (%s): "%s"',
          date, colors.red(req.method), colors.red(req.url),
          colors.red(error.status.toString()), colors.red(error.message)
        );
      }
      else {
        logger.info(
          '[%s] "%s %s" "%s"',
          date, colors.cyan(req.method), colors.cyan(req.url),
          req.headers['user-agent']
        );
      }
    }
  };
}
// 如果不是，则判断是否包含colors，赋值给两个空函数
else if (colors) {
  logger = {
    info: function () {},
    request: function () {}
  };
}
// 如果没有指定接口，则使用8080默认端口，使用portfinder，判断若被占用，则寻找新的端口进行监听
if (!port) {
  portfinder.basePort = 8080;
  portfinder.getPort(function (err, port) {
    if (err) { throw err; }
    listen(port);
  });
}
else {
  listen(port);
}

// 监听函数listen
function listen(port) {
  // 配置项
  var options = {
    // 根目录
    root: argv._[0],
    // 缓存
    cache: argv.c,
    // 是否显示目录
    showDir: argv.d,
    // 自动index
    autoIndex: argv.i,
    // 是否开启gzip
    gzip: argv.g || argv.gzip,
    // 
    robots: argv.r || argv.robots,
    // 扩展名
    ext: argv.e || argv.ext,
    // logFn函数
    logFn: logger.request,
    // 代理
    proxy: proxy,
    // 显示.文件
    showDotfiles: argv.dotfiles
  };

  // 如果控制台有配置cors，则追加corsHeader选项
  if (argv.cors) {
    options.cors = true;
    if (typeof argv.cors === 'string') {
      options.corsHeaders = argv.cors;
    }
  }

  if (ssl) {
    // 配置了ssl，则追加https选项，包含证书
    options.https = {
      cert: argv.C || argv.cert || 'cert.pem',
      key: argv.K || argv.key || 'key.pem'
    };
  }

  // httpServer库中的createServer方法，采用options配置参数来启动服务
  var server = httpServer.createServer(options);
  server.listen(port, host, function () {
    var canonicalHost = host === '0.0.0.0' ? '127.0.0.1' : host,
        protocol      = ssl ? 'https://' : 'http://';

    // 输出信息
    logger.info([colors.yellow('Starting up http-server, serving '),
      colors.cyan(server.root),
      ssl ? (colors.yellow(' through') + colors.cyan(' https')) : '',
      colors.yellow('\nAvailable on:')
    ].join(''));

    // 判断host不是 '0.0.0.0'则输出相关信息
    if (argv.a && host !== '0.0.0.0') {
      logger.info(('  ' + protocol + canonicalHost + ':' + colors.green(port.toString())));
    }
    else {
      // 判断网络模块，是IPv4的输出信息（console.log）
      Object.keys(ifaces).forEach(function (dev) {
        ifaces[dev].forEach(function (details) {
          if (details.family === 'IPv4') {
            logger.info(('  ' + protocol + details.address + ':' + colors.green(port.toString())));
          }
        });
      });
    }

    if (typeof proxy === 'string') {
      logger.info('Unhandled requests will be served from: ' + proxy);
    }

    // 提示按ctrl+c键终止服务
    logger.info('Hit CTRL-C to stop the server');
    if (argv.o) {
      // 配置了o参数，则打开浏览器，自动跳转到这个网址
      opener(
        protocol + canonicalHost + ':' + port,
        { command: argv.o !== true ? argv.o : null }
      );
    }
  });
}

if (process.platform === 'win32') {
  require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
  }).on('SIGINT', function () {
    process.emit('SIGINT');
  });
}

process.on('SIGINT', function () {
  logger.info(colors.red('http-server stopped.'));
  process.exit();
});

process.on('SIGTERM', function () {
  logger.info(colors.red('http-server stopped.'));
  process.exit();
});
